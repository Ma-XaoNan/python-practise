def gcd_recursive(a, b):
    if b == 0:
        return a
    else:
        return gcd_recursive(b, a % b)

# 示例调用
a = 5
b = 15
result = gcd_recursive(a, b)
print("最大公约数:", result)


# 欧几里德算法通过不断取两个数的余数来递归地求解最大公约数。
# 算法步骤如下：
# 如果第二个数b等于0，那么最大公约数就是第一个数a，直接返回a作为结果。
# 如果第二个数b不等于0，执行递归步骤。
# 在递归步骤中，将第二个数b和第一个数a除以b的余数a % b作为新的参数传递给函数。
# 递归调用的作用是将问题转化为求两个数中较小数和两数的差的最大公约数。
# 递归调用会一直进行，直到第二个数b等于0，满足终止条件。
# 当满足终止条件时，最后一次递归调用返回的结果就是最大公约数。
# 返回最大公约数作为结果。


# 定义了一个名为gcd_recursive的函数，接受两个参数a和b，表示要计算最大公约数的两个数。
# 如果b等于0，即第二个数为0，那么最大公约数就是a，直接返回a作为结果。
# 如果b不等于0，执行递归步骤。
# 在递归步骤中，调用gcd_recursive函数，将b和a % b作为参数传递给函数。这里使用取模运算a % b来计算a除以b的余数。
# 递归调用的作用是将问题转化为求b和a % b的最大公约数。
# 递归调用会一直进行，直到b等于0，满足终止条件。
# 当满足终止条件时，最后一次递归调用返回的结果就是最大公约数。
# 返回最大公约数作为结果。